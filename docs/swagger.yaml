openapi: 3.0.0
info:
  title: Tecnoesis API
  version: 1.0.0
  description: The API for Tecnoesis 2022 event

components:

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 38

        firebaseId:
          type: string
          example: "YiuqYLtElLTNGaNy9vistAz3u663"

        name:
          type: string
          example: "John Smith"

        username:
          type: string
          example: "helloworldxxx69"

        email:
          type: string
          example: "helloworld@nits.ac.in"

        balance:
          type: integer
          example: 1000

        collegeName:
          type: string
          example: "National Institute of Technology, Silchar"

        registrationId:
          type: string
          example: "2012001"

        imageUrl:
          type: string
          example: "https://avatars.githubusercontent.com/u/74897001"

    Team:
      type: object
      properties:
        id:
          type: integer
          example: 32

        teamName:
          type: string
          example: "404 Coders"

        registrationStatus:
          type: string
          enum:
            - REGISTERED
            - PENDING
            - CANCELLED

    TeamRegistration:
      type: object
      properties:
        id:
          type: integer
          example: 23

        registrationStatus:
          type: string
          enum:
            - REGISTERED
            - PENDING
            - CANCELLED

        rol:
          type: string
          enum:
            - LEADER
            - MEMBER

    Module:
      type: object
      properties:
        id:
          type: integer
          example: 93

        name:
          type: string
          example: "Coding Hackathon"

        description:
          type: string
          example: "A very good event module"

        image:
          type: string
          example: "https://avatars.githubusercontent.com/u/74897001"

        thirdPartyUrl:
          type: string
          example: "https://www.google.com"

    Event:
      type: object
      properties:
        id:
          type: integer
          example: 43

        name:
          type: string
          example: "Coding Competition"

        image:
          type: string
          example: "https://avatars.githubusercontent.com/u/74897001"

        maxTeamSize:
          type: integer
          example: 5

        minTeamSize:
          type: integer
          example: 1

        incentive:
          type: number
          example: 100

        isIncentivised:
          type: boolean
          example: true

        prizeDescription:
          type: string
          example: "First prize gets a Lamborghini"

        stagesDescription:
          type: string
          example: "First round will be a group discussion"

        description:
          type: string
          example: "Very good competition. Pls register."

        venue:
          type: string
          example: "Sports Complex"

        lat:
          type: string
          example: "24.7560907"

        lng:
          type: string
          example: "92.7823423"

        registrationStartTime:
          type: string
          example: "Tue Aug 16 2022 18:47:42 GMT+0530 (India Standard Time)"

        registrationEndTime:
          type: string
          example: "Tue Aug 16 2022 18:47:42 GMT+0530 (India Standard Time)"

    Transaction:
      type: object
      properties:
        id:
          type: number
          example: 65

        amount:
          type: number
          example: 2000

        reason:
          type: string
          enum:
            - ATTENDANCE
            - PURCHASE

        createdAt:
          type: string
          example: "Tue Aug 16 2022 18:47:42 GMT+0530 (India Standard Time)"

servers:
  - url: http://localhost:5000/api
    description: Development Server

paths:
  /auth/signup:
    post:
      description: Login or SignUp a user
      tags:
        - Auth
      security:
        - BearerAuth: []
      requestBody:
        description: A JSON object containing user information
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Smith"
                email:
                  type: string
                  example: "awesomeguy@nits.ac.in"
                collegeName:
                  type: string
                  example: "National Institute of Technology, Silchar"
                registrationId:
                  type: string
                  example: "2012001"
                imageUrl:
                  type: string
                  example: "https://avatars.githubusercontent.com/u/74897001"

      responses:
        200:
          description: Successful
  /transaction/attendance:
    post:
      description: Transaction for attendance, provided the user is manager of the event.
      tags:
        - Transaction
      security:
        - BearerAuth: []
      requestBody:
        description: A JSON containing the eventId and the attendee id
        content:
          application/json:
            schema:
              type: object
              properties:
                toUserId:
                  type: string
                  example: "u7dpk73akmjzs765"
                eventId:
                  type: string
                  example: "pq864mvcx66238njdhfy98"

      responses:
        200:
          description:
            Transaction completed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    type: string
                    example: "Transaction completed successfully."
        403:
          description:
            Transaction failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 403
                  msg:
                    type: string
                    example: "Transaction failed."
  /transaction/purchase:
    post:
      description:
        Transaction for purchase, provided the receiver is admin.
      tags:
        - Transaction
      security:
        - BearerAuth: []
      requestBody:
        description: A JSON containing the eventId and the attendee id
        content:
          application/json:
            schema:
              type: object
              properties:
                toAdminId:
                  type: string
                  example: "u7dpk73akmjzs765"
                eventId:
                  type: string
                  example: "pq864mvcx66238njdhfy98"
                amount:
                  type: number
                  example: 100
      responses:
        200:
          description:
            Transaction completed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    type: string
                    example: "Transaction completed successfully."
        403:
          description:
            Transaction failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 403
                  msg:
                    type: string
                    example: "Transaction failed."
        400:
          description:
            Transaction failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 400
                  msg:
                    type: string
                    example: "Invalid amount transaction"

  /event/{eventId}/add:
    post:
      description: Register a team for an event

      tags:
        - Team

      security:
        - BearerAuth: []

      parameters:

        - in: path
          name: eventId

          schema:
            type: integer

          required: true

          description: Numeric ID of the event in which the team is registering

      requestBody:

        description: A JSON Object containing team info for registering

        content:
          application/json:
            schema:
              type: object

              properties:
                name:
                  type: string
                  example: "John Smith"

                members:
                  type: array

                  items:
                    type: object

                    properties:
                      username:
                        type: string
                        example: "johnsmittecno22"

                      role:
                        type: string
                        enum:
                          - LEADER
                          - MEMBER
                        example: MEMBER

      responses:

        200:
          description: Team Registration Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Team Created sucessfully.

        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  msg:
                    type: string
                    example: Team size isn't allowed.

        404:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  msg:
                    type: string
                    example: User not found.

        409:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 409
                  msg:
                    type: string
                    example: Team Already Exists.

  /event/{eventId}/team/{teamId}:
    get:
      description: Get the details of a team

      tags:
        - Team

      parameters:

        - in: path
          name: eventId

          schema:
            type: integer

          required: true

          description: Numeric ID of the event in which the team is registering

        - in: path
          name: teamId

          schema:
            type: integer

          required: true

          description: Numeric ID of the team

      responses:

        200:
          description: Team Deatils Successfully Recieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamName:
                    type: string
                    example: "404 Coders"
                  registrationStatus:
                    type: string
                    enum:
                      - REGISTERED
                      - PENDING
                      - CANCELLED
                  event:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "Coding Hackathon"
                      venue:
                        type: string
                        example: "Sports Complex"
                      lat:
                        type: string
                        description: "Latitude"
                        example: "24.7560907"

                      lng:
                        type: string
                        description: "Longitude"
                        example: "93.7560907"
                      module:
                        type: object
                        properties:
                          name:
                            type: string
                            example: "Hackathons"

        404:
          description: Team Not Found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  msg:
                    type: string
                    example: Team Not Found.

  /event/{eventId}/team/{teamId}/respond:
    patch:
      description: User responding to team invite

      tags:
        - Team

      security:
        - BearerAuth: []

      parameters:

        - in: path
          name: eventId

          schema:
            type: integer

          required: true

          description: Numeric ID of the event in which the team is registering

        - in: path
          name: teamId

          schema:
            type: integer

          required: true

          description: Numeric ID of the team

      requestBody:

        description: A JSON Object for the user's response to an invitation

        content:
          application/json:
            schema:
              type: object

              properties:

                status:
                  type: string
                  enum:
                    - REGISTERED
                    - PENDING
                    - CANCELLED
                  example: REGISTERED

      responses:

        200:
          description: User Response Registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: User Status Updated.

        409:
          description: Conflict.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  msg:
                    type: string
                    example: User Not Part of Team.
