openapi: 3.0.0
info:
  title: Tecnoesis API
  version: 1.0.0
  description: The API for Tecnoesis 2022 event

components:

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 38

        firebaseId:
          type: string
          example: "YiuqYLtElLTNGaNy9vistAz3u663"

        name:
          type: string
          example: "John Smith"

        username:
          type: string
          example: "helloworldxxx69"

        email:
          type: string
          example: "helloworld@nits.ac.in"

        balance:
          type: integer
          example: 1000

        collegeName:
          type: string
          example: "National Institute of Technology, Silchar"

        registrationId:
          type: string
          example: "2012001"

        imageUrl:
          type: string
          example: "https://avatars.githubusercontent.com/u/74897001"

    Team:
      type: object
      properties:
        id:
          type: integer
          example: 32

        teamName:
          type: string
          example: "404 Coders"

        registrationStatus:
          type: string
          enum:
            - REGISTERED
            - PENDING
            - CANCELLED

    TeamRegistration:
      type: object
      properties:
        id:
          type: integer
          example: 23

        registrationStatus:
          type: string
          enum:
            - REGISTERED
            - PENDING
            - CANCELLED

        rol:
          type: string
          enum:
            - LEADER
            - MEMBER

    Module:
      type: object
      properties:
        id:
          type: integer
          example: 93

        name:
          type: string
          example: "Coding Hackathon"

        description:
          type: string
          example: "A very good event module"

        image:
          type: string
          example: "https://avatars.githubusercontent.com/u/74897001"

        thirdPartyURL:
          type: string
          example: "https://www.google.com"

    Event:
      type: object
      properties:
        id:
          type: integer
          example: 43

        name:
          type: string
          example: "Coding Competition"

        image:
          type: string
          example: "https://avatars.githubusercontent.com/u/74897001"

        maxTeamSize:
          type: integer
          example: 5

        minTeamSize:
          type: integer
          example: 1

        incentive:
          type: number
          example: 100

        isIncentivised:
          type: boolean
          example: true

        prizeDescription:
          type: string
          example: "First prize gets a Lamborghini"

        stagesDescription:
          type: string
          example: "First round will be a group discussion"

        description:
          type: string
          example: "Very good competition. Pls register."

        venue:
          type: string
          example: "Sports Complex"

        lat:
          type: string
          example: "24.7560907"

        lng:
          type: string
          example: "92.7823423"

        registrationStartTime:
          type: string
          example: "Tue Aug 16 2022 18:47:42 GMT+0530 (India Standard Time)"

        registrationEndTime:
          type: string
          example: "Tue Aug 16 2022 18:47:42 GMT+0530 (India Standard Time)"

    Transaction:
      type: object
      properties:
        id:
          type: number
          example: 65

        amount:
          type: number
          example: 2000

        reason:
          type: string
          enum:
            - ATTENDANCE
            - PURCHASE

        createdAt:
          type: string
          example: "Tue Aug 16 2022 18:47:42 GMT+0530 (India Standard Time)"

servers:
  - url: http://localhost:5000/api
    description: Development Server

paths:
  /auth/signup:
    post:
      description: Login or SignUp a user
      tags:
        - Auth
      security:
        - BearerAuth: []
      requestBody:
        description: A JSON object containing user information
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Smith"
                email:
                  type: string
                  example: "awesomeguy@nits.ac.in"
                collegeName:
                  type: string
                  example: "National Institute of Technology, Silchar"
                registrationId:
                  type: string
                  example: "2012001"
                username:
                  type: string
                  example: "josu"
                imageUrl:
                  type: string
                  example: "https://avatars.githubusercontent.com/u/74897001"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    type: string
                    example: user created
        409:
          description: Conflict user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 409
                  msg:
                    type: string
                    example: User exist with same parameters
        401:
          description: User not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 401
                  msg:
                    type: string
                    example: User Not authenticated

  /transaction/attendance:
    post:
      description: Transaction for attendance, provided the user is manager of the event.
      tags:
        - Transaction
      security:
        - BearerAuth: []
      requestBody:
        description: A JSON containing the eventId and the attendee id
        content:
          application/json:
            schema:
              type: object
              properties:
                toUserId:
                  type: string
                  example: "u7dpk73akmjzs765"
                eventId:
                  type: string
                  example: "pq864mvcx66238njdhfy98"

      responses:
        200:
          description:
            Transaction completed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    type: string
                    example: "Transaction completed successfully."
        403:
          description:
            Transaction failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 403
                  msg:
                    type: string
                    example: "Transaction failed."
  /transaction/purchase:
    post:
      description:
        Transaction for purchase, provided the receiver is admin.
      tags:
        - Transaction
      security:
        - BearerAuth: []
      requestBody:
        description: A JSON containing the eventId and the attendee id
        content:
          application/json:
            schema:
              type: object
              properties:
                toAdminId:
                  type: string
                  example: "u7dpk73akmjzs765"
                eventId:
                  type: string
                  example: "pq864mvcx66238njdhfy98"
                amount:
                  type: number
                  example: 100
      responses:
        200:
          description:
            Transaction completed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    type: string
                    example: "Transaction completed successfully."
        403:
          description:
            Transaction failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 403
                  msg:
                    type: string
                    example: "Transaction failed."
        400:
          description:
            Transaction failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 400
                  msg:
                    type: string
                    example: "Invalid amount transaction"
  /module/:
    get:
      summary: Get an array of JSON module objects.
      tags:
          - Module
      responses:
        '200':
          description: An Array of JSON event objects.
          content:  
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '500':
            description: Throws if server is unresponsive.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 500
                    msg:
                      type: string
                      example: "Internal server error."
  /module/{moduleId}:
    get:
        summary: Get a JSON module object.
        parameters:
          - in: path
            name: moduleId

            schema:
              type: number

            required: true

            description: Numeric ID of the module requested.

        tags:
          - Module
        responses:
          '200':
            description: A JSON module object.
            content:  
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 200
                    msg:
                      $ref: '#/components/schemas/Module'
          '400':
            description: Throws if moduleId is not a number.
            content:  
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 400
                    msg:
                      type: string
                      example: "Invalid input"

          '404':
              description: Throws if module does not exist.
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      status:
                        type: number
                        example: 404
                      msg:
                        type: string
                        example: "Module not found"
          '500':
              description: Throws if server is unresponsive.
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      status:
                        type: number
                        example: 500
                      msg:
                        type: string
                        example: "Internal server error."
    delete:
      security:
        - BearerAuth: []
      summary: Delete a module.
      parameters:
        - in: path
          name: moduleId

          schema:
            type: number

          required: true

          description: Numeric ID of the module requested.

      tags:
        - Module
      responses:
        '200':
          description: A JSON object of the deleted module.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    $ref: '#/components/schemas/Module'
        '400':
          description: Throws if moduleId is not a number.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 400
                  msg:
                    type: string
                    example: "Invalid input"
        '403':
          description: The user is not an admin and cannot delete a module.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 403
                  msg:
                    type: string
                    example: "User is not authorized to perform the request"

        '404':
            description: Throws if module does not exist.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 404
                    msg:
                      type: string
                      example: "Module not found"
        '500':
            description: Throws if server is unresponsive.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 500
                    msg:
                      type: string
                      example: "Internal server error."
    patch:
      security:
        - BearerAuth: []
      summary: Edit a module.
      parameters:
        - in: path
          name: moduleId

          schema:
            type: number

          required: true

          description: Numeric ID of the module requested.
      requestBody:
        description: A JSON object containing all the details for a module.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Big Module 6'
                description:
                  type: string
                  example: '<p>This is an example <strong>module</strong></p>'
                image:
                  type: string
                  example: 'https://i.kym-cdn.com/entries/icons/facebook/000/040/009/3dsaulcover.jpg'
                thirdPartyURL:
                  type: string
                  example: 'https://google.com/'
      tags:
        - Module
      responses:
        '200':
          description: A JSON object of the edited module.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    $ref: '#/components/schemas/Module'
        '400':
          description: Throws if moduleId is not a number.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 400
                  msg:
                    type: string
                    example: "Invalid input"
        '403':
          description: The user is not an admin and cannot edit a module.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 403
                  msg:
                    type: string
                    example: "User is not authorized to perform the request"

        '404':
            description: Throws if module does not exist.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 404
                    msg:
                      type: string
                      example: "Module not found"
        '500':
            description: Throws if server is unresponsive.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 500
                    msg:
                      type: string
                      example: "Internal server error."
                      
    
  /module/create:
    post:
      requestBody:
        description: A JSON object containing all the details for a module.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Big Module 6'
                description:
                  type: string
                  example: '<p>This is an example <strong>module</strong></p>'
                image:
                  type: string
                  example: 'https://i.kym-cdn.com/entries/icons/facebook/000/040/009/3dsaulcover.jpg'
                thirdPartyURL:
                  type: string
                  example: 'https://google.com/'
      security:
      - BearerAuth: []
      summary: Create a module
      tags:
        - Module
      responses:
        '200':
          description: A JSON object of created module objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    $ref: '#/components/schemas/Module'
        '400':
          description: Throws if response body has empty fields.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 400
                  msg:
                    type: string
                    example: "Invalid input"
        '403':
          description: The user is not an admin and cannot create a module.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 403
                  msg:
                    type: string
                    example: "User is not authorized to perform the request"
        '500':
          description: Throws if server is unresponsive.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 500
                  msg:
                    type: string
                    example: "Internal server error."
  /event:
    get:
      summary: Get an array of all events
      tags:
        - Event
      responses:
        '200':
          description: An Array of JSON event objects.
          content:  
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '500':
            description: Throws if server is unresponsive.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 500
                    msg:
                      type: string
                      example: "Internal server error."
  /event/module/{moduleId}:
    get:
      summary: Get an array of JSON event objects.
      parameters:
        - in: path
          name: moduleID

          schema:
            type: number

          required: true

          description: Numeric ID of the module requested.
      tags: 
        - Event
      responses:
        '200':
          description: An Array of JSON event objects.
          content:  
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Throws if moduleId is not a number.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 400
                  msg:
                    type: string
                    example: "Invalid input"
        '404':
            description: Throws if module does not exist.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 404
                    msg:
                      type: string
                      example: "Module not found"

        '500':
            description: Throws if server is unresponsive.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 500
                    msg:
                      type: string
                      example: "Internal server error."

  /event/{eventId}:
    get:
      summary: Get a JSON event object.
      parameters:
        - in: path
          name: eventId

          schema:
            type: number

          required: true

          description: Numeric ID of the event requested.

      tags:
        - Event
      responses:
        '200':
          description: A JSON event object.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    $ref: '#/components/schemas/Event'
        '400':
          description: Throws if event id is not a number.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 400
                  msg:
                    type: string
                    example: "Invalid input"

        '404':
            description: Throws if event does not exist.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 404
                    msg:
                      type: string
                      example: "Event not found"
        '500':
            description: Throws if server is unresponsive.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 500
                    msg:
                      type: string
                      example: "Internal server error."
    patch:
      summary: Edit an event
      tags:
        - Event
      security:
        - BearerAuth: []
      parameters:
      - in: path
        name: eventId

        schema:
          type: number

        required: true

        description: Numeric ID of the event requested.
      requestBody:
        description: A JSON Object containg the edits to be made to the event.
        content:
          application/json:
            schema:
              type: object
              properties:
                moduleId:
                  type: integer
                  example: 43

                name:
                  type: string
                  example: "Coding Competition"

                image:
                  type: string
                  example: "https://avatars.githubusercontent.com/u/74897001"

                maxTeamSize:
                  type: integer
                  example: 5

                minTeamSize:
                  type: integer
                  example: 1

                incentive:
                  type: number
                  example: 100

                isIncentivised:
                  type: boolean
                  example: true

                prizeDescription:
                  type: string
                  example: "First prize gets a Lamborghini"

                stagesDescription:
                  type: string
                  example: "First round will be a group discussion"

                description:
                  type: string
                  example: "Very good competition. Pls register."

                venue:
                  type: string
                  example: "Sports Complex"

                lat:
                  type: string
                  example: "24.7560907"

                lng:
                  type: string
                  example: "92.7823423"

                registrationStartTime:
                  type: string
                  example: "Tue Aug 16 2022 18:47:42 GMT+0530 (India Standard Time)"

                registrationEndTime:
                  type: string
                  example: "Tue Aug 16 2022 18:47:42 GMT+0530 (India Standard Time)"

                organisers:
                  type: array
                  items:
                    type: object
                    properties:
                      username:
                        type: string
                        example: "mohan"
                managers:
                  type: array
                  items:
                    type: object
                    properties:
                      username:
                        type: string
                        example: "rohan"
      responses:
        '200':
          description: A JSON object of the edited event.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    $ref: '#/components/schemas/Event'
        '400':
          description: Throws if event id is not a number.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 400
                  msg:
                    type: string
                    example: "Invalid input"
        '403':
          description: The user is not an admin and cannot create an event.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 403
                  msg:
                    type: string
                    example: "User is not authorized to perform the request"
        '500':
            description: Throws if server is unresponsive.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 500
                    msg:
                      type: string
                      example: "Internal server error."
    delete:
      summary: Delete an event
      tags:
        - Event
      security:
        - BearerAuth: []
      parameters:
      - in: path
        name: eventId

        schema:
          type: number

        required: true

        description: Numeric ID of the event requested
      responses:
        '200':
          description: A JSON object of the deleted event.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    $ref: '#/components/schemas/Event'
        '400':
          description: Throws if eventId is not a number.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 400
                  msg:
                    type: string
                    example: "Invalid input"
        '403':
          description: The user is not an admin and cannot delete an event.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 403
                  msg:
                    type: string
                    example: "User is not authorized to perform the request"

        '404':
            description: Throws if event does not exist.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 404
                    msg:
                      type: string
                      example: "Module not found"
        '500':
            description: Throws if server is unresponsive.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 500
                    msg:
                      type: string
                      example: "Internal server error."
      
      
  /event/create:
    post:
      summary: Create an event.
      tags:
        - Event
      security:
        - BearerAuth: []
      requestBody:
        description: A JSON Object containing details of the event to be created.
        content: 
          application/json:
            schema:
              type: object
              properties:
                moduleId:
                  type: integer
                  example: 43

                name:
                  type: string
                  example: "Coding Competition"

                image:
                  type: string
                  example: "https://avatars.githubusercontent.com/u/74897001"

                maxTeamSize:
                  type: integer
                  example: 5

                minTeamSize:
                  type: integer
                  example: 1

                incentive:
                  type: number
                  example: 100

                isIncentivised:
                  type: boolean
                  example: true

                prizeDescription:
                  type: string
                  example: "First prize gets a Lamborghini"

                stagesDescription:
                  type: string
                  example: "First round will be a group discussion"

                description:
                  type: string
                  example: "Very good competition. Pls register."

                venue:
                  type: string
                  example: "Sports Complex"

                lat:
                  type: string
                  example: "24.7560907"

                lng:
                  type: string
                  example: "92.7823423"

                registrationStartTime:
                  type: string
                  example: "Tue Aug 16 2022 18:47:42 GMT+0530 (India Standard Time)"

                registrationEndTime:
                  type: string
                  example: "Tue Aug 16 2022 18:47:42 GMT+0530 (India Standard Time)"
                organisers:
                  type: array
                  items:
                    type: object
                    properties:
                      username:
                        type: string
                        example: "mohan"
                managers:
                  type: array
                  items:
                    type: object
                    properties:
                      username:
                        type: string
                        example: "rohan"



      responses:
        '200':
          description: A JSON object of the created event.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    $ref: '#/components/schemas/Event'
        '400':
          description: Throws if requestbody has empty fields.
          content:  
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 400
                  msg:
                    type: string
                    example: "Invalid input"
        '403':
          description: The user is not an admin and cannot create an event.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 403
                  msg:
                    type: string
                    example: "User is not authorized to perform the request"
        '500':
            description: Throws if server is unresponsive.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: number
                      example: 500
                    msg:
                      type: string
                      example: "Internal server error."
                
  /event/{eventId}/team/add:
    post:
      description: Register a team for an event

      tags:
        - Team

      security:
        - BearerAuth: []

      parameters:

        - in: path
          name: eventId

          schema:
            type: integer

          required: true

          description: Numeric ID of the event in which the team is registering

      requestBody:

        description: A JSON Object containing team info for registering

        content:
          application/json:
            schema:
              type: object

              properties:
                name:
                  type: string
                  example: "John Smith"

                members:
                  type: array

                  items:
                    type: object

                    properties:
                      username:
                        type: string
                        example: "johnsmittecno22"

                      role:
                        type: string
                        enum:
                          - LEADER
                          - MEMBER
                        example: MEMBER

      responses:
        200:
          description: Team Registration Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Team Created sucessfully.

        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  msg:
                    type: string
                    example: Team size isn't allowed.

        404:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  msg:
                    type: string
                    example: User not found.

        409:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 409
                  msg:
                    type: string
                    example: Team Already Exists.

  /event/{eventId}/team/{teamId}:
    get:
      description: Get the details of a team

      tags:
        - Team

      parameters:

        - in: path
          name: eventId

          schema:
            type: integer

          required: true

          description: Numeric ID of the event in which the team is registering

        - in: path
          name: teamId

          schema:
            type: integer

          required: true

          description: Numeric ID of the team

      responses:

        200:
          description: Team Deatils Successfully Recieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  teamName:
                    type: string
                    example: "404 Coders"
                  registrationStatus:
                    type: string
                    enum:
                      - REGISTERED
                      - PENDING
                      - CANCELLED
                  event:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "Coding Hackathon"
                      venue:
                        type: string
                        example: "Sports Complex"
                      lat:
                        type: string
                        description: "Latitude"
                        example: "24.7560907"

                      lng:
                        type: string
                        description: "Longitude"
                        example: "93.7560907"
                      module:
                        type: object
                        properties:
                          name:
                            type: string
                            example: "Hackathons"

        404:
          description: Team Not Found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  msg:
                    type: string
                    example: Team Not Found.

  /event/{eventId}/team/{teamId}/respond:
    patch:
      description: User responding to team invite

      tags:
        - Team

      security:
        - BearerAuth: []

      parameters:

        - in: path
          name: eventId

          schema:
            type: integer

          required: true

          description: Numeric ID of the event in which the team is registering

        - in: path
          name: teamId

          schema:
            type: integer

          required: true

          description: Numeric ID of the team

      requestBody:

        description: A JSON Object for the user's response to an invitation

        content:
          application/json:
            schema:
              type: object

              properties:

                status:
                  type: string
                  enum:
                    - REGISTERED
                    - PENDING
                    - CANCELLED
                  example: REGISTERED

      responses:
        200:
          description: User Response Registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: User Status Updated.

        409:
          description: Conflict.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  msg:
                    type: string
                    example: User Not Part of Team.
  /user:
    get:
      tags:
        - User
      description: Get all users
      security:
        - BearerAuth: []
      responses:
        200:
          description: A JSON object contain all users in an array
          content: 
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    $ref: '#/components/schemas/User'
    patch:
      tags:
        - User
      description: updates the details of the user loged in
      security:
        - BearerAuth: []
      requestBody:
        description: A JSON object with the updated details of the user
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: true
                  example: "netra"
                collegeName:
                  type: string
                  nullable: true
                  example: "National Institute of Technology Silchar"
                registrationId:
                  type: string
                  nullable: true
                  example: 2012000
                imageUrl:
                  type: string
                  nullable: true
                  example: https://picsum.photos/200
      responses:
        200:
          description:  A JSON object containing the updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    $ref: '#/components/schemas/User'  
  /user/me:
    get:
      tags:
        - User
      description: get the loged in User
      security:
        - BearerAuth: []
      responses:
        200:
          description: A JSON Object with the loged in user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    $ref: '#/components/schemas/User'
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 404
                  msg:
                    type: string
                    example: User not found
  /user/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to get
        
      tags:
        - User
      description: Get one user using it's id
      security:
        - BearerAuth: []
      responses:
        200:
          description: A JSON object containing the requested user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  msg:
                    $ref: '#/components/schemas/User'
        404:
          description: User with given id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 404
                  msg:
                    type: string
                    example: User not found
        400:
          description: bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 400
                  msg:
                    type: string
                    example: Incorrect user id
